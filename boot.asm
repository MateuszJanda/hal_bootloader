[bits 16]           ; generate code designed to run on a processor operating in 16-bit mode
[org 0x7c00] ; MBR start address


jmp main

    ; mov ah, 0x0e            ; BIOS command to move our cursor forward
    ; mov al, 'X'             ; Store the character to print in the al register
    ; int 0x10                ; BIOS interrupt - equivalent to print function

; mov ax, HELLO_MSG ; 1st variable

main:
    ; set video mode
    xor     ax, ax     ; DS=0
    mov     ds, ax
    cld                ; DF=0 because our LODSB requires it
    mov ax, 0x03
    int 0x10


    ; set cursor position
    ; mov ah, 0x02
    ; mov dh, 1
    ; mov dl, 1
    ; int 0x10




    ; mov si, hal_text        ; pass argument
    ; mov     bl, 04h    ; RedOnBlack
    ; call print_text    ; call the function

    ; mov dh, 1
    ; mov di, hal_eye+(0 * 25)
    ; call print_eye

    mov dh, 1
    mov si, hal_eye+(0 * 25)
    call print_eye

    ; mov dh, 2
    ; mov si, hal_eye+(1 * 25)
    ; call print_eye

    ; mov dh, 3
    ; mov si, hal_eye+(2 * 25)
    ; call print_eye

    ; mov dh, 4
    ; mov si, hal_eye+(3 * 25)
    ; call print_eye

    ; mov dh, 5
    ; mov si, hal_eye+(4 * 25)
    ; call print_eye

    ; mov dh, 6
    ; mov si, hal_eye+(5 * 25)
    ; call print_eye

    ; mov dh, 7
    ; mov si, hal_eye+(6 * 25)
    ; call print_eye

    ; mov dh, 8
    ; mov si, hal_eye+(7 * 25)
    ; call print_eye


    jmp $


; move_to_next_line:
;     mov ah, 0x02
;     mov dl, 1
;     int 0x10
;     ret



; print_text:
;     pusha           ; push all registers to stack
;     mov     bh, 0     ; DisplayPage
;     mov     cx, 1
;     mov bl, 0x04        ; color - light red


; next_char:
;     lodsb
;     ; mov ah, 0x09
;     ; mov al, [bx]        ; Store the character to print in the al register
;     cmp al, 0
;     je end_print_text
;     ; xchg   dx, bx       ; Only BX can be used as an index register
;     mov ah, 0x09    ; ;      Write Character and Attribute
;     int 0x10        ;  BIOS interrupt - equivalent to print function
;     ; xchg   dx, bx       ; Only BX can be used as an index register
;     ; inc bx


;     mov     ah, 0x0e   ; BIOS.Teletype
;     int     10h


;     jmp next_char
; end_print_text:
;     popa            ; pop all registers to stack
;     ret




print_eye:
    mov ah, 0x02
    mov dl, 1
    int 0x10

    ; pusha           ; push all registers to stack
    ; mov     bh, 0     ; DisplayPage
    mov al, 220                ; 0x09, 0x0e function - ASCII character to write â–„
    mov     cx, 1               ; 0x09 function - count of characters to write
    mov bh, 0
    mov dx, 25
next_block:
    ; lodsb

    cmp dx, 0
    je end_print_eye

    mov bl, [si]        ; 0x09 background, foreground color

    ; cmp bx, 0
    ; je end_print_eye
    ; mov bx, 0xec

    ; mov ah, 0x09
    ; mov al, [bx]        ; Store the character to print in the al register
    ; cmp al, 0
    ; je end_print_eye
    ; xchg   dx, bx       ; Only BX can be used as an index register

    mov ah, 0x09    ; ;      BIOS Function code - Write Character and Attribute
    int 0x10        ;  BIOS interrupt call

    ; xchg   dx, bx       ; Only BX can be used as an index register
    ; inc bx


    mov     ah, 0x0e   ; BIOS Function code - Teletype output
    int     10h             ; BIOS interrupt call

    dec dx
    inc si
    jmp next_block
end_print_eye:
    ; popa            ; pop all registers to stack
    ret


hal_eye:
    db 0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9
    db 0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac,0xac
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x08,0x08,0x77,0x77,0x77,0x77,0xf7,0xf7,0x37,0x07,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00
    db 0x00,0x00,0x00,0x03,0x07,0x38,0x80,0x80,0x00,0x00,0x08,0x07,0x07,0x08,0x08,0x00,0x80,0x80,0x80,0x88,0x07,0x0f,0x00,0x00,0x00
    db 0x00,0x00,0x07,0xf8,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x80,0x78,0x07,0x00,0x00
    db 0x00,0x86,0x88,0x00,0x07,0x80,0x08,0x00,0x04,0x44,0x40,0x44,0x44,0x44,0x40,0x44,0x04,0x00,0x00,0x00,0x00,0x00,0x88,0x76,0x00
    db 0x00,0x88,0x00,0x00,0x00,0x00,0x04,0x44,0x04,0x44,0x4c,0x4c,0xcc,0x4c,0x4c,0x44,0x04,0x44,0x04,0x00,0x00,0x00,0x00,0x68,0x08
    db 0x00,0x80,0x00,0x00,0x00,0x04,0x44,0x04,0x44,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x44,0x04,0x44,0x04,0x00,0x00,0x00,0x80,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0xcc,0xcc,0xcc,0xec,0xcc,0xcc,0xcc,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x08,0x00
    db 0x00,0x88,0x00,0x00,0x00,0x00,0x44,0x04,0x44,0xc4,0xcc,0xcc,0xcc,0xcc,0xcc,0xc4,0x44,0x04,0x44,0x00,0x00,0x00,0x00,0x86,0x00
    db 0x00,0x80,0x06,0x00,0x00,0x00,0x00,0x44,0x04,0x44,0x40,0x44,0x44,0x44,0x40,0x44,0x04,0x44,0x00,0x00,0x00,0x00,0x08,0x80,0x00
    db 0x00,0x00,0x60,0x07,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x44,0x44,0x44,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x8f,0x30,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x78,0x88,0x00,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x88,0x08,0x08,0x07,0x07,0x07,0x03,0x03,0x07,0x08,0x86,0x88,0x80,0x00,0x00,0x00,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x60,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00




hal_text:
    db "I'm sorry Dave, I'm afraid I can't do that", 0

times 510-($-$$) db 0   ;     Byte padding
dw 0xaa55               ; Mandatory, to mark this as valid MBR
